HalfCheetah-v5:
  trial_number: 23
  value: 1134.7487915999998
  params:
    clip_range: 0.2
    n_timesteps: 100000
    n_steps: 8
    gamma: 0.99
    learning_rate: 0.0006419987179615489
    n_critic_updates: 30
    cg_max_steps: 20
    target_kl: 0.005
    gae_lambda: 0.8
    batch_size: 512
    activation_fn: relu
    entropy_coef: -0.31999999999999995
    sampling_coef: -0.6
    epsilon: 0.25
    orthogonal_init: 0
    n_envs: 6
    normalize_advantage: 0
    net_arch: large
  comment: 'Best trial details: _number=23, state=1, _values=[1134.7487915999998],
    _datetime_start=2025-03-17 15:53:06.100142, datetime_complete=2025-03-18 06:59:10.946062,
    _params={''clip_range'': 0.2, ''n_timesteps'': 100000, ''n_steps'': 8, ''gamma'':
    0.99, ''learning_rate'': 0.0006419987179615489, ''n_critic_updates'': 30, ''cg_max_steps'':
    20, ''target_kl'': 0.005, ''gae_lambda'': 0.8, ''batch_size'': 512, ''activation_fn'':
    ''relu'', ''entropy_coef'': -0.31999999999999995, ''sampling_coef'': -0.6, ''epsilon'':
    0.25, ''orthogonal_init'': False, ''n_envs'': 6, ''normalize_advantage'': False,
    ''net_arch'': ''large''}, _user_attrs={}, _system_attrs={''completed_rung_0'':
    361.316407}, intermediate_values={1: 361.316407, 2: 1134.7487915999998}, _distributions={''clip_range'':
    CategoricalDistribution(choices=(0.1, 0.2, 0.3)), ''n_timesteps'': CategoricalDistribution(choices=(100000,)),
    ''n_steps'': CategoricalDistribution(choices=(8, 16, 32, 64, 128, 256, 512, 1024,
    2048)), ''gamma'': CategoricalDistribution(choices=(0.8, 0.85, 0.9, 0.95, 0.99)),
    ''learning_rate'': FloatDistribution(high=1.0, log=True, low=1e-05, step=None),
    ''n_critic_updates'': CategoricalDistribution(choices=(5, 10, 20, 25, 30)), ''cg_max_steps'':
    CategoricalDistribution(choices=(5, 10, 20, 25, 30)), ''target_kl'': CategoricalDistribution(choices=(0.1,
    0.05, 0.03, 0.02, 0.01, 0.005, 0.001)), ''gae_lambda'': CategoricalDistribution(choices=(0.8,
    0.9, 0.92, 0.95, 0.98, 0.99, 1.0)), ''batch_size'': CategoricalDistribution(choices=(256,
    512, 1024, 2048)), ''activation_fn'': CategoricalDistribution(choices=(''tanh'',
    ''relu'')), ''entropy_coef'': FloatDistribution(high=1.0, log=False, low=-1.0,
    step=0.01), ''sampling_coef'': FloatDistribution(high=1.0, log=False, low=-1.0,
    step=0.01), ''epsilon'': FloatDistribution(high=0.9, log=False, low=0.1, step=0.05),
    ''orthogonal_init'': CategoricalDistribution(choices=(True, False)), ''n_envs'':
    CategoricalDistribution(choices=(2, 4, 6, 8, 10)), ''normalize_advantage'': CategoricalDistribution(choices=(True,
    False)), ''net_arch'': CategoricalDistribution(choices=(''small'', ''medium'',
    ''large''))}, _trial_id=23'
Hopper-v5:
  trial_number: 25
  value: 552.9068558000001
  params:
    clip_range: 0.2
    n_timesteps: 100000
    n_steps: 64
    gamma: 0.8
    learning_rate: 8.265727210617774e-05
    n_critic_updates: 20
    cg_max_steps: 5
    target_kl: 0.05
    gae_lambda: 0.9
    batch_size: 1024
    activation_fn: tanh
    entropy_coef: -0.27
    sampling_coef: -0.69
    epsilon: 0.9
    orthogonal_init: 0
    n_envs: 8
    normalize_advantage: 0
    net_arch: medium
  comment: 'Best trial details: _number=25, state=1, _values=[552.9068558000001],
    _datetime_start=2025-03-20 04:52:23.356351, datetime_complete=2025-03-20 06:20:41.351427,
    _params={''clip_range'': 0.2, ''n_timesteps'': 100000, ''n_steps'': 64, ''gamma'':
    0.8, ''learning_rate'': 8.265727210617774e-05, ''n_critic_updates'': 20, ''cg_max_steps'':
    5, ''target_kl'': 0.05, ''gae_lambda'': 0.9, ''batch_size'': 1024, ''activation_fn'':
    ''tanh'', ''entropy_coef'': -0.27, ''sampling_coef'': -0.69, ''epsilon'': 0.9,
    ''orthogonal_init'': False, ''n_envs'': 8, ''normalize_advantage'': False, ''net_arch'':
    ''medium''}, _user_attrs={}, _system_attrs={''completed_rung_0'': 185.8517}, intermediate_values={1:
    185.8517, 2: 552.9068558000001}, _distributions={''clip_range'': CategoricalDistribution(choices=(0.1,
    0.2, 0.3)), ''n_timesteps'': CategoricalDistribution(choices=(100000,)), ''n_steps'':
    CategoricalDistribution(choices=(8, 16, 32, 64, 128, 256, 512, 1024, 2048)), ''gamma'':
    CategoricalDistribution(choices=(0.8, 0.85, 0.9, 0.95, 0.99)), ''learning_rate'':
    FloatDistribution(high=1.0, log=True, low=1e-05, step=None), ''n_critic_updates'':
    CategoricalDistribution(choices=(5, 10, 20, 25, 30)), ''cg_max_steps'': CategoricalDistribution(choices=(5,
    10, 20, 25, 30)), ''target_kl'': CategoricalDistribution(choices=(0.1, 0.05, 0.03,
    0.02, 0.01, 0.005, 0.001)), ''gae_lambda'': CategoricalDistribution(choices=(0.8,
    0.9, 0.92, 0.95, 0.98, 0.99, 1.0)), ''batch_size'': CategoricalDistribution(choices=(256,
    512, 1024, 2048)), ''activation_fn'': CategoricalDistribution(choices=(''tanh'',
    ''relu'')), ''entropy_coef'': FloatDistribution(high=1.0, log=False, low=-1.0,
    step=0.01), ''sampling_coef'': FloatDistribution(high=1.0, log=False, low=-1.0,
    step=0.01), ''epsilon'': FloatDistribution(high=0.9, log=False, low=0.1, step=0.05),
    ''orthogonal_init'': CategoricalDistribution(choices=(True, False)), ''n_envs'':
    CategoricalDistribution(choices=(2, 4, 6, 8, 10)), ''normalize_advantage'': CategoricalDistribution(choices=(True,
    False)), ''net_arch'': CategoricalDistribution(choices=(''small'', ''medium'',
    ''large''))}, _trial_id=25'
Humanoid-v5:
  trial_number: 99
  value: 492.1380956
  params:
    clip_range: 0.2
    n_timesteps: 100000
    n_steps: 32
    gamma: 0.95
    learning_rate: 2.1267809641089186e-05
    n_critic_updates: 20
    cg_max_steps: 20
    target_kl: 0.05
    gae_lambda: 1
    batch_size: 256
    net_arch: large
    activation_fn: tanh
    entropy_coef: 0.8300000000000001
    sampling_coef: 0.43999999999999995
    buffer_capacity: 69000
    epsilon: 0.4
    orthogonal_init: 1
    n_envs: 6
    normalize_advantage: 1
  comment: 'Best trial details: _number=99, state=1, _values=[492.1380956], _datetime_start=2025-03-09
    21:44:09.316727, datetime_complete=2025-03-09 23:13:22.971855, _params={''clip_range'':
    0.2, ''n_timesteps'': 100000, ''n_steps'': 32, ''gamma'': 0.95, ''learning_rate'':
    2.1267809641089186e-05, ''n_critic_updates'': 20, ''cg_max_steps'': 20, ''target_kl'':
    0.05, ''gae_lambda'': 1.0, ''batch_size'': 256, ''net_arch'': ''large'', ''activation_fn'':
    ''tanh'', ''entropy_coef'': 0.8300000000000001, ''sampling_coef'': 0.43999999999999995,
    ''buffer_capacity'': 69000, ''epsilon'': 0.4, ''orthogonal_init'': True, ''n_envs'':
    6, ''normalize_advantage'': True}, _user_attrs={}, _system_attrs={''completed_rung_0'':
    289.31602219999996, ''completed_rung_1'': 318.8043804}, intermediate_values={1:
    289.31602219999996, 2: 285.3951518, 3: 308.000014, 4: 318.8043804, 5: 303.37331,
    6: 436.8005126, 7: 444.7508102, 8: 467.0554664, 9: 434.291562, 10: 456.93805480000003,
    11: 498.31858919999996, 12: 492.1380956}, _distributions={''clip_range'': CategoricalDistribution(choices=(0.1,
    0.2, 0.3)), ''n_timesteps'': CategoricalDistribution(choices=(100000,)), ''n_steps'':
    CategoricalDistribution(choices=(8, 16, 32, 64, 128, 256, 512, 1024, 2048)), ''gamma'':
    CategoricalDistribution(choices=(0.8, 0.85, 0.9, 0.95, 0.99)), ''learning_rate'':
    FloatDistribution(high=1.0, log=True, low=1e-05, step=None), ''n_critic_updates'':
    CategoricalDistribution(choices=(5, 10, 20, 25, 30)), ''cg_max_steps'': CategoricalDistribution(choices=(5,
    10, 20, 25, 30)), ''target_kl'': CategoricalDistribution(choices=(0.1, 0.05, 0.03,
    0.02, 0.01, 0.005, 0.001)), ''gae_lambda'': CategoricalDistribution(choices=(0.8,
    0.9, 0.92, 0.95, 0.98, 0.99, 1.0)), ''batch_size'': CategoricalDistribution(choices=(256,
    512, 1024, 2048)), ''net_arch'': CategoricalDistribution(choices=(''small'', ''medium'',
    ''large'')), ''activation_fn'': CategoricalDistribution(choices=(''tanh'', ''relu'')),
    ''entropy_coef'': FloatDistribution(high=1.0, log=False, low=-1.0, step=0.01),
    ''sampling_coef'': FloatDistribution(high=1.0, log=False, low=-1.0, step=0.01),
    ''buffer_capacity'': IntDistribution(high=100000, log=False, low=5000, step=1000),
    ''epsilon'': FloatDistribution(high=0.9, log=False, low=0.1, step=0.05), ''orthogonal_init'':
    CategoricalDistribution(choices=(True, False)), ''n_envs'': CategoricalDistribution(choices=(2,
    4, 6, 8, 10)), ''normalize_advantage'': CategoricalDistribution(choices=(True,
    False))}, _trial_id=99'
